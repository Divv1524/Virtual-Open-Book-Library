package com.project.virtualopenbooklibrary.security;

import com.project.virtualopenbooklibrary.dto.UserDTO;
import com.project.virtualopenbooklibrary.entity.User;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.JwtException;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import java.nio.charset.StandardCharsets;
import java.security.Key;
import java.util.Date;
import java.util.function.Function;

@Component
public class JwtUtil {
private static final Logger logger = LoggerFactory.getLogger(JwtUtil.class);


    private User user;

    private static final byte[] SECRET_KEY_BYTES = "mysecretkeymysecretkeymysecretkeymysecretkey".getBytes(StandardCharsets.UTF_8);
    private static final Key SIGNING_KEY = Keys.hmacShaKeyFor(SECRET_KEY_BYTES);

    //it will take username
    public String generateToken(String username, String role)
    {
System.out.println("DEBUG: Generating token for username -> " + username + ", Role -> " + role);

        if (username == null || role == null) {
            throw new IllegalArgumentException("Username or Role cannot be null for JWT generation");
        }

        return Jwts.builder()
                .setSubject(username)
                .claim("role", role)
                .setIssuedAt(new Date(System.currentTimeMillis())) //time at which token is generated
                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 5)) // 5-hour validity
                .signWith(SIGNING_KEY, SignatureAlgorithm.HS256) //signing the token
                .compact();
    }
// Extract username from token
    public String extractUsername(String token) { //extra all detail
        return extractClaim(token, Claims::getSubject);
    }

    // Extract expiration date
    public Date extractExpiration(String token) {
        return extractClaim(token, Claims::getExpiration);
    }

    // Extract specific claim
    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }
private Claims extractAllClaims(String token) {
        return Jwts.parserBuilder()
                .setSigningKey(SIGNING_KEY)
                .build()
                .parseClaimsJws(token)
                .getBody();
    }

    //validating token as well as checking expiration of the token
    public boolean isTokenValid(String token, String username) {
        try {
String extractedUsername = extractUsername(token);
            boolean isValid = extractedUsername.equals(username) && !isTokenExpired(token);

            logger.debug("Extracted Username -> {}", extractedUsername);
            logger.debug("Provided Username -> {}", username);
            logger.debug("Is Token Expired? {}", isTokenExpired(token));
            logger.debug("Is Token Valid? {}", isValid);
            return isValid;
        } catch (JwtException e) {
            logger.warn("Invalid JWT token: {}", e.getMessage());
            return false;
        }
    }
// Check if token is expired
    private boolean isTokenExpired(String token) {
        return extractExpiration(token).before(new Date());
    }
}
